{"version":3,"sources":["utileria.js","App.js","index.js"],"names":["drawrect","detectados","ctx","forEach","prediccion","x","y","width","height","text","color","Math","floor","random","toString","stokeStyle","font","fillStyle","beginPath","fillText","rect","stroke","App","webcamRef","useRef","canvasRef","runCoco","a","cocossd","net","setInterval","detect","current","video","readyState","videoWidth","videoHeight","objeto","console","log","getContext","useEffect","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oZAAaA,EAAW,SAACC,EAAYC,GACjCD,EAAWE,SAAQ,SAAAC,GAAc,kBACDA,EAAU,KADT,GACtBC,EADsB,KACnBC,EADmB,KAChBC,EADgB,KACTC,EADS,KAEvBC,EAAKL,EAAU,MAGfM,EAAM,IAAIC,KAAKC,MAAoB,SAAdD,KAAKE,UAAmBC,SAAS,IAE5DZ,EAAIa,WAAaL,EACjBR,EAAIc,KAAK,aACTd,EAAIe,UAAUP,EAGdR,EAAIgB,YACJhB,EAAIiB,SAASV,EAAKJ,EAAEC,GACpBJ,EAAIkB,KAAKf,EAAEC,EAAEC,EAAMC,GACnBN,EAAImB,aC0FGC,MA7Ff,WACE,IAAMC,EAAYC,iBAAO,MACnBC,EAAYD,iBAAO,MAGnBE,EAAO,uCAAG,4BAAAC,EAAA,sEAIEC,MAJF,OAIRC,EAJQ,OAQdC,aAAY,WACVC,EAAOF,KACN,IAVW,2CAAH,qDAaPE,EAAM,uCAAG,WAAOF,GAAP,uBAAAF,EAAA,yDAKkB,qBAAtBJ,EAAUS,SACK,OAAtBT,EAAUS,SAC6B,IAAvCT,EAAUS,QAAQC,MAAMC,WAPb,wBAULD,EAAQV,EAAUS,QAAQC,MAC1BE,EAAaZ,EAAUS,QAAQC,MAAME,WACrCC,EAAcb,EAAUS,QAAQC,MAAMG,YAG5Cb,EAAUS,QAAQC,MAAM1B,MAAQ4B,EAChCZ,EAAUS,QAAQC,MAAMzB,OAAS4B,EAGjCX,EAAUO,QAAQzB,MAAQ4B,EAC1BV,EAAUO,QAAQxB,OAAS4B,EApBhB,UAuBUP,EAAIE,OAAOE,GAvBrB,QAuBLI,EAvBK,OAwBXC,QAAQC,IAAIF,GAGNnC,EAAMuB,EAAUO,QAAQQ,WAAW,MAIvCxC,EAASqC,EAAOnC,GA/BP,4CAAH,sDAmCZuC,qBAAU,WAAKf,MAAW,KC7D5BgB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.e2da947d.chunk.js","sourcesContent":["export const drawrect = (detectados, ctx) => {\r\n    detectados.forEach(prediccion => {//Funcion para detectar las dimensiones sobre la imagen\r\n        const [x, y, width, height]=prediccion['bbox'];\r\n        const text=prediccion['class'];//Una vez detectadas, identifica a que clase pertenece\r\n\r\n        //Dandole un color aleatorio al recuadro de la imagen\r\n        const color=\"#\"+Math.floor(Math.random()*16777215).toString(16);\r\n        //const color='green'\r\n        ctx.stokeStyle = color;\r\n        ctx.font='18px Arial'\r\n        ctx.fillStyle=color;\r\n\r\n        //dibujar en el canvas\r\n        ctx.beginPath();\r\n        ctx.fillText(text,x,y)\r\n        ctx.rect(x,y,width,height)\r\n        ctx.stroke()\r\n    })\r\n}","// Import dependencies\r\nimport React, { useRef, useState, useEffect } from \"react\";//Importa elementos de React\r\nimport * as tf from \"@tensorflow/tfjs\";//importa todo de tensorflow\r\n// 1. TODO - Import required model here\r\n// e.g. import * as tfmodel from \"@tensorflow-models/tfmodel\";\r\n//DEscarga la red neuronal para detectar objetos\r\nimport * as cocossd from \"@tensorflow-models/coco-ssd\";//importa todo de coco a través de tensorflow\r\nimport Webcam from \"react-webcam\";//Importa librerías referente a la cámara del dispositivo\r\nimport \"./App.css\";\r\n\r\n// 2. TODO - Import drawing utility here\r\nimport { drawrect } from \"./utileria\";//Importa el archivo utilería para dibujar el cuadro identificador\r\n\r\nfunction App() {\r\n  const webcamRef = useRef(null);//Iniciando las variables para las referencias de webcam y canvas.\r\n  const canvasRef = useRef(null);\r\n\r\n  // Main function\r\n  const runCoco = async () => {//--Declaracion de await para repetir la imagen cada 10 milisegundos, \r\n                               //--haciendo parecer un video \r\n    // 3. TODO - Load network    \r\n    //necesitamos invocar nuestra red neuronal. Se cicla por ser imagen para que se \"cicle\" hasta que se cierre la ventana\r\n    const net=await cocossd.load();\r\n    // e.g. const net = await cocossd.load();\r\n    \r\n    //  Loop and detect hands\r\n    setInterval(() => {\r\n      detect(net);\r\n    }, 10);\r\n  };\r\n\r\n  const detect = async (net) => {// Función para detectar las caracteristicas que tendrá el video como\r\n                //dimensiones y estilos\r\n\r\n    // Check data is available\r\n    if (\r\n      typeof webcamRef.current !== \"undefined\" &&\r\n      webcamRef.current !== null &&\r\n      webcamRef.current.video.readyState === 4\r\n    ) {\r\n      // Get Video Properties       \r\n      const video = webcamRef.current.video;\r\n      const videoWidth = webcamRef.current.video.videoWidth;\r\n      const videoHeight = webcamRef.current.video.videoHeight;\r\n\r\n      // Set video width\r\n      webcamRef.current.video.width = videoWidth;\r\n      webcamRef.current.video.height = videoHeight;\r\n\r\n      // Set canvas height and width\r\n      canvasRef.current.width = videoWidth;\r\n      canvasRef.current.height = videoHeight;\r\n\r\n      // 4. TODO - Make Detections\r\n      const objeto = await net.detect(video);\r\n      console.log(objeto);\r\n\r\n      // Draw mesh canvas, contexto de la imagen ciclada para dar una dimension y poder dibujar sobre la imagen.\r\n      const ctx = canvasRef.current.getContext(\"2d\");\r\n\r\n      // 5. TODO - Update drawing utility\r\n      // drawSomething(obj, ctx)  . lo que detecta en el video, canvas\r\n        drawrect(objeto,ctx);\r\n    }\r\n  };\r\n\r\n  useEffect(()=>{runCoco()},[]);\r\n\r\n  return (//Diseño HTML para visualizar la función\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Webcam\r\n          ref={webcamRef}\r\n          muted={true} \r\n          style={{\r\n            position: \"absolute\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            left: 0,\r\n            right: 0,\r\n            textAlign: \"center\",\r\n            zindex: 9,\r\n            width: 640,\r\n            height: 480,\r\n          }}\r\n        />\r\n\r\n        <canvas\r\n          ref={canvasRef}\r\n          style={{\r\n            position: \"absolute\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            left: 0,\r\n            right: 0,\r\n            textAlign: \"center\",\r\n            zindex: 8,\r\n            width: 640,\r\n            height: 480,\r\n          }}\r\n        />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}